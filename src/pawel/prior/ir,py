# Import necessary libraries
import tensorflow as tf
from tensorflow.keras import models, layers
from tensorflow.keras.datasets import mnist
import matplotlib.pyplot as plt
import numpy as np

# 1. Load and preprocess the data
(X_train, y_train), (X_test, y_test) = mnist.load_data()

# Normalize pixel values between 0 and 1
X_train = X_train.astype('float32') / 255.0
X_test = X_test.astype('float32') / 255.0

# Reshape images for the model
X_train = X_train.reshape(-1, 28, 28, 1)
X_test = X_test.reshape(-1, 28, 28, 1)

# 2. Create the CNN model
model = models.Sequential([
    # First Convolutional Layer
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D((2, 2)),

    # Second Convolutional Layer
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),

    # Flatten the output for dense layers
    layers.Flatten(),

    # Dense layers
    layers.Dense(64, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(10, activation='softmax')
])

# 3. Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# 4. Train the model
history = model.fit(X_train, y_train,
                    epochs=5,
                    batch_size=64,
                    validation_split=0.2)

# 5. Evaluate the model
test_loss, test_accuracy = model.evaluate(X_test, y_test)
print(f"\nTest accuracy: {test_accuracy:.4f}")

# 6. Make predictions


def predict_digit(image):
    # Reshape and normalize the image
    image = image.reshape(1, 28, 28, 1)
    image = image.astype('float32') / 255.0

    # Get prediction
    prediction = model.predict(image)
    return np.argmax(prediction[0])

# 7. Visualize results


def plot_sample_predictions():
    plt.figure(figsize=(12, 4))
    for i in range(10):
        plt.subplot(2, 5, i+1)
        plt.imshow(X_test[i].reshape(28, 28), cmap='gray')
        pred = predict_digit(X_test[i])
        plt.title(f'Pred: {pred}')
        plt.axis('off')
    plt.tight_layout()
    plt.show()

# 8. Plot training history


def plot_training_history():
    plt.figure(figsize=(12, 4))

    plt.subplot(1, 2, 1)
    plt.plot(history.history['accuracy'], label='Training')
    plt.plot(history.history['val_accuracy'], label='Validation')
    plt.title('Model Accuracy')
    plt.xlabel('Epoch')
    plt.ylabel('Accuracy')
    plt.legend()

    plt.subplot(1, 2, 2)
    plt.plot(history.history['loss'], label='Training')
    plt.plot(history.history['val_loss'], label='Validation')
    plt.title('Model Loss')
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.legend()

    plt.tight_layout()
    plt.show()


# Display results
plot_sample_predictions()
plot_training_history()

# 9. Function to make predictions on new images


def predict_new_image(image_path):
    # Load and preprocess new image
    img = tf.keras.preprocessing.image.load_img(
        image_path, color_mode='grayscale', target_size=(28, 28)
    )
    img_array = tf.keras.preprocessing.image.img_to_array(img)
    img_array = img_array.reshape(1, 28, 28, 1)
    img_array = img_array / 255.0

    # Make prediction
    prediction = model.predict(img_array)
    predicted_digit = np.argmax(prediction[0])
    confidence = np.max(prediction[0])

    return predicted_digit, confidence

# Example usage:
# predicted_digit, confidence = predict_new_image('path_to_your_image.png')
# print(f"Predicted digit: {predicted_digit}")
# print(f"Confidence: {confidence:.2f}")
